# ArgoCD configuration for homelab cluster

# Bootstrap app-of-apps using Job hook - creates once and deletes itself
extraObjects:
  - apiVersion: batch/v1
    kind: Job
    metadata:
      name: argocd-bootstrap
      namespace: argocd
      annotations:
        "helm.sh/hook": post-install
        "helm.sh/hook-weight": "10"
        "helm.sh/hook-delete-policy": hook-succeeded
    spec:
      template:
        spec:
          serviceAccountName: argocd-application-controller
          restartPolicy: Never
          containers:
          - name: create-app-of-apps
            image: bitnami/kubectl:1.30
            command:
            - /bin/sh
            - -c
            - |
              echo "→ Checking if app-of-apps already exists..."
              if kubectl get application app-of-apps -n argocd >/dev/null 2>&1; then
                echo "✔ App-of-apps already exists, skipping creation"
                exit 0
              fi
              
              echo "→ Waiting for ArgoCD to be ready..."
              echo "→ Waiting for ArgoCD server deployment..."
              if ! kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd; then
                echo "✗ ArgoCD server failed to become ready"
                exit 1
              fi
              
              echo "→ Waiting for ArgoCD application controller..."
              if ! kubectl wait --for=condition=ready --timeout=300s pod/argocd-application-controller-0 -n argocd; then
                echo "✗ ArgoCD application controller failed to become ready"
                exit 1
              fi
              
              echo "→ Waiting for ArgoCD repo server..."
              if ! kubectl wait --for=condition=available --timeout=300s deployment/argocd-repo-server -n argocd; then
                echo "✗ ArgoCD repo server failed to become ready"
                exit 1
              fi
              
              echo "✔ All ArgoCD components are ready, creating app-of-apps Application..."
              cat <<EOF | kubectl apply -f -
              apiVersion: argoproj.io/v1alpha1
              kind: Application
              metadata:
                name: app-of-apps
                namespace: argocd
                finalizers:
                  - resources-finalizer.argocd.argoproj.io
              spec:
                project: default
                source:
                  repoURL: https://github.com/pavlenkoa/homelab.git
                  targetRevision: HEAD
                  path: kubernetes/app-of-apps
                  helm:
                    valueFiles:
                      - values/homelab.yaml
                destination:
                  server: https://kubernetes.default.svc
                  namespace: argocd
                syncPolicy:
                  automated:
                    prune: true
                    selfHeal: true
                  syncOptions:
                    - "CreateNamespace=true"
                    - "ServerSideApply=true"
                    - "ServerSideDiff=true"
                  retry:
                    limit: 3
                    backoff:
                      duration: "5s"
                      factor: 2
                      maxDuration: "2m"
              EOF
              echo "✔ App-of-apps created successfully!"

# Server configuration
server:
  # Ingress configuration for proper TLS termination
  ingress:
    enabled: true
    ingressClassName: "nginx"
    hostname: "argocd.pavlenko.io"
    pathType: ImplementationSpecific
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
    extraTls:
    - secretName: argocd-server-tls
      hosts:
      - "argocd.pavlenko.io"

# ArgoCD configuration via configs section
configs:
  params:
    server.insecure: true
  
  cm:
    # Enable anonymous access for easier setup (can be disabled later)
    url: "https://argocd.pavlenko.io"
    
    # Resource customizations
    resource.customizations: |
      argoproj.io/Application:
        health.lua: |
          hs = {}
          hs.status = "Progressing"
          hs.message = ""
          if obj.status ~= nil then
            if obj.status.health ~= nil then
              hs.status = obj.status.health.status
              if obj.status.health.message ~= nil then
                hs.message = obj.status.health.message
              end
            end
          end
          return hs
    
    # Global ignore differences for common Kubernetes normalization issues
    resource.customizations.ignoreDifferences.all: |
      jsonPointers:
      - /metadata/generation
      managedFieldsManagers:
      - kube-controller-manager
    
    # StatefulSet volumeClaimTemplates normalization  
    resource.customizations.ignoreDifferences.apps_StatefulSet: |
      jqPathExpressions:
      - .spec.volumeClaimTemplates[].apiVersion
      - .spec.volumeClaimTemplates[].kind
    
    # Webhook CA bundle changes (managed by cert-manager)
    resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
      jqPathExpressions:
      - .webhooks[]?.clientConfig.caBundle
    
    resource.customizations.ignoreDifferences.admissionregistration.k8s.io_ValidatingWebhookConfiguration: |
      jqPathExpressions:
      - .webhooks[]?.clientConfig.caBundle

  # Git repositories configuration
  repositories:
    homelab:
      url: https://github.com/pavlenkoa/homelab.git
      type: git
      name: homelab

# Controller configuration
controller:
  resources:
    limits:
      memory: 512Mi
    requests:
      memory: 256Mi

# Repo server configuration  
repoServer:
  resources:
    limits:
      memory: 256Mi
    requests:
      memory: 128Mi

# Application set controller
applicationSet:
  enabled: true
  resources:
    limits:
      memory: 128Mi
    requests:
      memory: 64Mi

# Notifications controller
notifications:
  enabled: false  # Can enable later for alerting

# Redis configuration
redis:
  resources:
    limits:
      memory: 128Mi
    requests:
      memory: 64Mi
