{{- if .Values.preInstall.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "authelia.fullname" . }}-secrets-generator
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "authelia.labels" . | nindent 4 }}
    app.kubernetes.io/component: secret-generator
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  ttlSecondsAfterFinished: 300
  backoffLimit: 3
  template:
    metadata:
      labels:
        {{- include "authelia.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: secret-generator
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ include "authelia.fullname" . }}-pre-install
      containers:
      - name: generate-secrets
        image: alpine:3.19
        command: ["/bin/sh"]
        args:
        - -c
        - |
          set -e
          echo "→ Starting Authelia secret generation..."
          
          # Install required tools
          echo "→ Installing required tools..."
          apk add --no-cache curl openssl argon2 > /dev/null 2>&1
          echo "✓ Base tools installed"
          
          # Download and install Vault CLI
          echo "→ Installing Vault CLI..."
          VAULT_VERSION="1.15.2"
          curl -sSL "https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip" -o vault.zip
          unzip vault.zip > /dev/null 2>&1
          chmod +x vault
          mv vault /usr/local/bin/
          echo "✓ Vault CLI installed"
          
          # Wait for Vault to be available
          echo "→ Waiting for Vault to respond..."
          timeout=300
          elapsed=0
          while true; do
            vault status > /dev/null 2>&1
            VAULT_STATUS_CODE=$?
            # Exit codes: 0=unsealed, 1=error, 2=sealed but responding
            if [ $VAULT_STATUS_CODE -eq 0 ] || [ $VAULT_STATUS_CODE -eq 2 ]; then
              echo "✓ Vault is responding (status code: $VAULT_STATUS_CODE)"
              break
            fi
            if [ $elapsed -ge $timeout ]; then
              echo "✗ Timeout waiting for Vault to respond"
              exit 1
            fi
            echo "→ Waiting for Vault to start... ($elapsed/$timeout seconds)"
            sleep 5
            elapsed=$((elapsed + 5))
          done
          
          # Check if secrets already exist
          echo "→ Checking if Authelia secrets already exist..."
          if vault kv get {{ .Values.vault.secretPath }} > /dev/null 2>&1; then
            echo "✓ Authelia secrets already exist in Vault"
            exit 0
          fi
          
          echo "→ Generating new Authelia secrets..."
          
          # Generate cryptographically secure random secrets
          echo "→ Generating cryptographic secrets..."
          jwt_secret=$(openssl rand -base64 64 | tr -d '\n')
          session_secret=$(openssl rand -base64 64 | tr -d '\n')
          storage_encryption_key=$(openssl rand -base64 64 | tr -d '\n')
          oidc_hmac_secret=$(openssl rand -base64 64 | tr -d '\n')
          immich_oidc_client_secret=$(openssl rand -base64 32 | tr -d '\n')
          oidc_jwks_key=$(openssl rand -base64 128 | tr -d '\n')
          echo "✓ Cryptographic secrets generated"
          
          # Auto-generate secure admin password
          echo "→ Generating admin credentials..."
          admin_password=$(openssl rand -base64 32 | tr -d '\n')
          echo "✓ Admin password generated: $admin_password"
          
          # Generate argon2id hash for Authelia using the file backend parameters
          echo "→ Generating argon2id password hash..."
          # Use a random salt and argon2 with file backend parameters: m=512KB (2^9), t=1, p=8
          salt=$(openssl rand -hex 16)
          admin_password_hash=$(echo -n "$admin_password" | argon2 "$salt" -id -t 1 -m 9 -p 8 -l 32 -e)
          echo "✓ Password hash generated using argon2id"
          
          # Generate users database YAML
          echo "→ Creating users database configuration..."
          users_database=$(cat <<EOF
          ---
          users:
            admin:
              displayname: "{{ .Values.preInstall.adminUser.displayName | default "Administrator" }}"
              disabled: false
              password: "$admin_password_hash"
              email: "{{ .Values.preInstall.adminUser.email | default "admin@pavlenko.io" }}"
              groups:
                - admins
          groups:
            admins:
              - admin
          EOF
          )
          echo "✓ Users database configuration created"
          
          # Store all secrets in Vault
          echo "→ Storing secrets in Vault..."
          vault kv put {{ .Values.vault.secretPath }} \
            jwt_secret="$jwt_secret" \
            session_secret="$session_secret" \
            storage_encryption_key="$storage_encryption_key" \
            oidc_hmac_secret="$oidc_hmac_secret" \
            immich_oidc_client_secret="$immich_oidc_client_secret" \
            oidc_jwks_key="$oidc_jwks_key" \
            admin_password="$admin_password" \
            users_database="$users_database"
          
          if [ $? -eq 0 ]; then
            echo "✓ Secrets stored in Vault successfully"
          else
            echo "✗ Failed to store secrets in Vault"
            exit 1
          fi
            
          echo "✓ Authelia secret generation complete!"
          echo "→ Admin credentials: admin / $admin_password"
          echo "→ Admin password stored in Vault for reference"
          echo "→ Password hash generated using argon2id algorithm"
          echo "→ All secrets available via external-secrets sync"
        env:
        - name: VAULT_ADDR
          value: {{ .Values.vault.address }}
        - name: VAULT_TOKEN
          valueFrom:
            secretKeyRef:
              name: vault-unseal-keys
              key: root-token
              namespace: vault
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
{{- end }}