{{- if .Values.autoUnseal.enabled }}
---
# Single unified job that handles both initialization and auto-unsealing
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "vault-complete.fullname" . }}-auto-unseal
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "vault-complete.labels" . | nindent 4 }}
    app.kubernetes.io/component: vault-auto-unseal
spec:
  schedule: {{ .Values.autoUnseal.schedule | default "*/2 * * * *" | quote }}  # Every 2 minutes by default
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid  # Prevent overlapping jobs
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        metadata:
          labels:
            {{- include "vault-complete.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: vault-auto-unseal
        spec:
          serviceAccountName: {{ .Values.autoUnseal.rbac.serviceAccountName }}
          restartPolicy: OnFailure
          initContainers:
            - name: install-tools
              image: alpine:latest
              command:
                - sh
                - -c
                - |
                  apk add --no-cache curl jq
                  # Download kubectl
                  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                  chmod +x kubectl
                  cp kubectl /shared/kubectl
                  cp /usr/bin/jq /shared/jq
                  echo "Tools installed successfully"
              volumeMounts:
                - name: shared-tools
                  mountPath: /shared
          containers:
            - name: vault-auto-unseal
              image: {{ .Values.autoUnseal.image | default "hashicorp/vault:1.15.2" }}
              env:
                - name: VAULT_ADDR
                  value: "http://vault:8200"
                - name: VAULT_SKIP_VERIFY
                  value: "true"
                - name: PATH
                  value: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/shared"
              command:
                - sh
                - -c
                - |
                  echo "Starting Vault auto-unseal process..."
                  
                  # Check if Vault service exists
                  if ! /shared/kubectl get service vault -n {{ .Release.Namespace }} > /dev/null 2>&1; then
                    echo "Vault service not found, exiting"
                    exit 0
                  fi
                  
                  # Wait for Vault to be responsive (up to 2 minutes for cron jobs)
                  echo "Waiting for Vault to respond..."
                  timeout=120
                  elapsed=0
                  while true; do
                    vault status > /dev/null 2>&1
                    VAULT_STATUS_CODE=$?
                    # Exit codes: 0=unsealed, 1=error, 2=sealed but responding
                    if [ $VAULT_STATUS_CODE -eq 0 ] || [ $VAULT_STATUS_CODE -eq 2 ]; then
                      echo "Vault is responding (status code: $VAULT_STATUS_CODE)"
                      break
                    fi
                    if [ $elapsed -ge $timeout ]; then
                      echo "Timeout waiting for Vault to respond, exiting"
                      exit 0
                    fi
                    echo "Waiting for Vault... ($elapsed/$timeout seconds)"
                    sleep 5
                    elapsed=$((elapsed + 5))
                  done
                  
                  # Check current Vault status
                  echo "Checking Vault status..."
                  VAULT_STATUS=$(vault status -format=json 2>/dev/null || echo '{"initialized":false,"sealed":true}')
                  echo "$VAULT_STATUS" > /tmp/vault_status.json
                  INITIALIZED=$(/shared/jq -r '.initialized // false' /tmp/vault_status.json)
                  SEALED=$(/shared/jq -r '.sealed // true' /tmp/vault_status.json)
                  
                  echo "Vault initialized: $INITIALIZED, sealed: $SEALED"
                  
                  # Handle initialization if needed
                  if [ "$INITIALIZED" = "false" ]; then
                    echo "Vault is not initialized, initializing..."
                    
                    # Initialize Vault
                    INIT_OUTPUT=$(vault operator init -key-shares=5 -key-threshold=3 -format=json)
                    if [ $? -ne 0 ]; then
                      echo "Failed to initialize Vault"
                      exit 1
                    fi
                    
                    echo "Vault initialized successfully"
                    
                    # Extract keys and token
                    echo "$INIT_OUTPUT" > /tmp/vault_init.json
                    UNSEAL_KEY_1=$(/shared/jq -r '.unseal_keys_b64[0]' /tmp/vault_init.json)
                    UNSEAL_KEY_2=$(/shared/jq -r '.unseal_keys_b64[1]' /tmp/vault_init.json)
                    UNSEAL_KEY_3=$(/shared/jq -r '.unseal_keys_b64[2]' /tmp/vault_init.json)
                    UNSEAL_KEY_4=$(/shared/jq -r '.unseal_keys_b64[3]' /tmp/vault_init.json)
                    UNSEAL_KEY_5=$(/shared/jq -r '.unseal_keys_b64[4]' /tmp/vault_init.json)
                    ROOT_TOKEN=$(/shared/jq -r '.root_token' /tmp/vault_init.json)
                    
                    # Create or update Kubernetes secret
                    /shared/kubectl create secret generic vault-unseal-keys \
                      --from-literal=unseal-key-1="$UNSEAL_KEY_1" \
                      --from-literal=unseal-key-2="$UNSEAL_KEY_2" \
                      --from-literal=unseal-key-3="$UNSEAL_KEY_3" \
                      --from-literal=unseal-key-4="$UNSEAL_KEY_4" \
                      --from-literal=unseal-key-5="$UNSEAL_KEY_5" \
                      --from-literal=root-token="$ROOT_TOKEN" \
                      --namespace={{ .Release.Namespace }} \
                      --dry-run=client -o yaml | /shared/kubectl apply -f -
                    
                    echo "Unseal keys secret created/updated"
                    
                    # Mark as sealed so we continue to unseal logic
                    SEALED="true"
                  fi
                  
                  # Handle unsealing if needed
                  if [ "$SEALED" = "true" ]; then
                    echo "Vault is sealed, attempting to unseal..."
                    
                    # Check if unseal keys secret exists
                    if ! /shared/kubectl get secret vault-unseal-keys -n {{ .Release.Namespace }} > /dev/null 2>&1; then
                      echo "ERROR: Unseal keys secret not found, cannot unseal"
                      exit 1
                    fi
                    
                    # Get unseal keys from Kubernetes secret
                    echo "Retrieving unseal keys from secret..."
                    UNSEAL_KEY_1=$(/shared/kubectl get secret vault-unseal-keys -n {{ .Release.Namespace }} -o jsonpath='{.data.unseal-key-1}' | base64 -d)
                    UNSEAL_KEY_2=$(/shared/kubectl get secret vault-unseal-keys -n {{ .Release.Namespace }} -o jsonpath='{.data.unseal-key-2}' | base64 -d)
                    UNSEAL_KEY_3=$(/shared/kubectl get secret vault-unseal-keys -n {{ .Release.Namespace }} -o jsonpath='{.data.unseal-key-3}' | base64 -d)
                    
                    # Unseal with 3 keys (threshold)
                    echo "Unsealing Vault..."
                    vault operator unseal "$UNSEAL_KEY_1" > /dev/null
                    vault operator unseal "$UNSEAL_KEY_2" > /dev/null
                    vault operator unseal "$UNSEAL_KEY_3" > /dev/null
                    
                    # Verify unsealing worked
                    if vault status | grep -q "Sealed.*false"; then
                      echo "✅ Vault successfully unsealed"
                    else
                      echo "❌ Failed to unseal Vault"
                      exit 1
                    fi
                  else
                    echo "✅ Vault is already unsealed"
                  fi
                  
                  echo "Auto-unseal process completed successfully"
              volumeMounts:
                - name: shared-tools
                  mountPath: /shared
          volumes:
            - name: shared-tools
              emptyDir: {}
{{- end }}