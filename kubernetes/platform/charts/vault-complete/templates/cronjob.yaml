{{- if .Values.autoUnseal.cronJob.enabled }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "vault-complete.fullname" . }}-auto-unseal
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "vault-complete.labels" . | nindent 4 }}
    app.kubernetes.io/component: vault-auto-unseal
spec:
  schedule: {{ .Values.autoUnseal.cronJob.schedule | quote }}
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        metadata:
          labels:
            {{- include "vault-complete.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: vault-auto-unseal
        spec:
          serviceAccountName: {{ .Values.autoUnseal.rbac.serviceAccountName }}
          restartPolicy: OnFailure
          initContainers:
            - name: install-tools
              image: alpine:latest
              command:
                - sh
                - -c
                - |
                  apk add --no-cache curl
                  # Download kubectl
                  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                  chmod +x kubectl
                  cp kubectl /shared/kubectl
              volumeMounts:
                - name: shared-tools
                  mountPath: /shared
          containers:
            - name: vault-unseal
              image: {{ .Values.autoUnseal.cronJob.image }}
              env:
                - name: VAULT_ADDR
                  value: "http://{{ include "vault-complete.fullname" . }}:8200"
                - name: VAULT_SKIP_VERIFY
                  value: "true"
                - name: PATH
                  value: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/shared"
              command:
                - sh
                - -c
                - |
                  # Check if Vault service is available
                  if ! /shared/kubectl get service {{ include "vault-complete.fullname" . }} -n {{ .Release.Namespace }} > /dev/null 2>&1; then
                    echo "Vault service not found, skipping unseal"
                    exit 0
                  fi
                  
                  # Check if Vault is responding
                  if ! vault status > /dev/null 2>&1; then
                    echo "Vault is not responding, skipping unseal"
                    exit 0
                  fi
                  
                  # Check if Vault is sealed
                  if vault status | grep -q "Sealed.*true"; then
                    echo "Vault is sealed, attempting to unseal..."
                    
                    # Check if unseal keys secret exists
                    if ! /shared/kubectl get secret vault-unseal-keys -n {{ .Release.Namespace }} > /dev/null 2>&1; then
                      echo "Unseal keys secret not found, cannot unseal"
                      exit 1
                    fi
                    
                    # Get unseal keys from Kubernetes secret
                    UNSEAL_KEY_1=$(/shared/kubectl get secret vault-unseal-keys -n {{ .Release.Namespace }} -o jsonpath='{.data.unseal-key-1}' | base64 -d)
                    UNSEAL_KEY_2=$(/shared/kubectl get secret vault-unseal-keys -n {{ .Release.Namespace }} -o jsonpath='{.data.unseal-key-2}' | base64 -d)
                    UNSEAL_KEY_3=$(/shared/kubectl get secret vault-unseal-keys -n {{ .Release.Namespace }} -o jsonpath='{.data.unseal-key-3}' | base64 -d)
                    
                    # Unseal with 3 keys (threshold)
                    vault operator unseal "$UNSEAL_KEY_1" > /dev/null
                    vault operator unseal "$UNSEAL_KEY_2" > /dev/null
                    vault operator unseal "$UNSEAL_KEY_3" > /dev/null
                    
                    echo "Vault unsealed successfully"
                  else
                    echo "Vault is already unsealed"
                  fi
              volumeMounts:
                - name: shared-tools
                  mountPath: /shared
          volumes:
            - name: shared-tools
              emptyDir: {}
{{- end }}