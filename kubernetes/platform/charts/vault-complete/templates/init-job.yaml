{{- if .Values.autoUnseal.initJob.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "vault-complete.fullname" . }}-init
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "vault-complete.labels" . | nindent 4 }}
    app.kubernetes.io/component: vault-init
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        {{- include "vault-complete.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: vault-init
    spec:
      serviceAccountName: {{ .Values.autoUnseal.rbac.serviceAccountName }}
      restartPolicy: OnFailure
      initContainers:
        - name: install-tools
          image: alpine:latest
          command:
            - sh
            - -c
            - |
              apk add --no-cache curl jq
              # Download kubectl
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl
              cp kubectl /shared/kubectl
              cp /usr/bin/jq /shared/jq
              echo "Tools installed successfully"
          volumeMounts:
            - name: shared-tools
              mountPath: /shared
      containers:
        - name: vault-init
          image: {{ .Values.autoUnseal.initJob.image }}
          env:
            - name: VAULT_ADDR
              value: "http://vault:8200"
            - name: VAULT_SKIP_VERIFY
              value: "true"
            - name: PATH
              value: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/shared"
          command:
            - sh
            - -c
            - |
              # Wait for Vault service to be available
              echo "Waiting for Vault service to be ready..."
              until /shared/kubectl get service vault -n {{ .Release.Namespace }} > /dev/null 2>&1; do
                echo "Waiting for Vault service..."
                sleep 5
              done
              
              # Wait for Vault to respond (up to 5 minutes)
              echo "Waiting for Vault to respond..."
              timeout=300
              elapsed=0
              until vault status > /dev/null 2>&1; do
                if [ $elapsed -ge $timeout ]; then
                  echo "Timeout waiting for Vault to respond"
                  exit 1
                fi
                echo "Waiting for Vault to start... ($elapsed/$timeout seconds)"
                sleep 5
                elapsed=$((elapsed + 5))
              done
              
              # Check if Vault is already initialized
              if vault status | grep -q "Initialized.*false"; then
                echo "Initializing Vault..."
                
                # Initialize Vault and capture output
                vault operator init -key-shares=5 -key-threshold=3 -format=json > /tmp/vault-init.json
                
                # Extract unseal keys and root token
                UNSEAL_KEY_1=$(/shared/jq -r '.unseal_keys_b64[0]' /tmp/vault-init.json)
                UNSEAL_KEY_2=$(/shared/jq -r '.unseal_keys_b64[1]' /tmp/vault-init.json)
                UNSEAL_KEY_3=$(/shared/jq -r '.unseal_keys_b64[2]' /tmp/vault-init.json)
                UNSEAL_KEY_4=$(/shared/jq -r '.unseal_keys_b64[3]' /tmp/vault-init.json)
                UNSEAL_KEY_5=$(/shared/jq -r '.unseal_keys_b64[4]' /tmp/vault-init.json)
                ROOT_TOKEN=$(/shared/jq -r '.root_token' /tmp/vault-init.json)
                
                # Create Kubernetes secret with unseal keys and root token
                /shared/kubectl create secret generic vault-unseal-keys \
                  --from-literal=unseal-key-1="$UNSEAL_KEY_1" \
                  --from-literal=unseal-key-2="$UNSEAL_KEY_2" \
                  --from-literal=unseal-key-3="$UNSEAL_KEY_3" \
                  --from-literal=unseal-key-4="$UNSEAL_KEY_4" \
                  --from-literal=unseal-key-5="$UNSEAL_KEY_5" \
                  --from-literal=root-token="$ROOT_TOKEN" \
                  --namespace={{ .Release.Namespace }} || true
                
                # Clean up temporary file
                rm -f /tmp/vault-init.json
                
                echo "Vault initialized successfully and secret created"
                
                # Initial unseal
                echo "Performing initial unseal..."
                vault operator unseal "$UNSEAL_KEY_1"
                vault operator unseal "$UNSEAL_KEY_2"
                vault operator unseal "$UNSEAL_KEY_3"
                
                echo "Vault unsealed successfully"
              else
                echo "Vault is already initialized"
                
                # Check if secret exists, if not this might be a restart scenario
                if ! /shared/kubectl get secret vault-unseal-keys -n {{ .Release.Namespace }} > /dev/null 2>&1; then
                  echo "ERROR: Vault is initialized but unseal keys secret is missing!"
                  echo "You need to manually recreate the vault-unseal-keys secret with the original keys."
                  exit 1
                fi
                
                # Unseal if needed
                if vault status | grep -q "Sealed.*true"; then
                  echo "Vault is sealed, unsealing..."
                  
                  # Get unseal keys from Kubernetes secret
                  UNSEAL_KEY_1=$(/shared/kubectl get secret vault-unseal-keys -n {{ .Release.Namespace }} -o jsonpath='{.data.unseal-key-1}' | base64 -d)
                  UNSEAL_KEY_2=$(/shared/kubectl get secret vault-unseal-keys -n {{ .Release.Namespace }} -o jsonpath='{.data.unseal-key-2}' | base64 -d)
                  UNSEAL_KEY_3=$(/shared/kubectl get secret vault-unseal-keys -n {{ .Release.Namespace }} -o jsonpath='{.data.unseal-key-3}' | base64 -d)
                  
                  # Unseal with 3 keys (threshold)
                  vault operator unseal "$UNSEAL_KEY_1"
                  vault operator unseal "$UNSEAL_KEY_2"
                  vault operator unseal "$UNSEAL_KEY_3"
                  
                  echo "Vault unsealed successfully"
                else
                  echo "Vault is already unsealed"
                fi
              fi
              
              echo "Vault initialization job completed successfully"
          volumeMounts:
            - name: shared-tools
              mountPath: /shared
      volumes:
        - name: shared-tools
          emptyDir: {}
{{- end }}